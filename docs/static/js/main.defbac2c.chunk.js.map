{"version":3,"sources":["data.js","PageExample.js","App.js","serviceWorker.js","index.js"],"names":["PROJECTS","_id","_class","label","WBS","WORKPACKAGES","i","EDGES","from_id","from_class","to_id","to_class","PageExample","columns","leveling","required","contents","c","d","description","wbs_source","projects","WBS_DATA","wbs","workpackages","edges","style","padding","source","options","fontSize","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAAaA,EAAW,CACpB,CACIC,IAAK,EACLC,OAAQ,UACRC,MAAO,MAGFC,EAAM,CACf,CACIH,IAAK,GACLC,OAAQ,MACRC,MAAO,MAGFE,EAAe,CACxB,CACIJ,IAAK,IACLC,OAAQ,cACRC,MAAO,MAIXG,EAAI,IACKC,EAAQ,CACjB,CACIN,IAAKK,IACLE,QAAS,EACTC,WAAY,UACZC,MAAO,GACPC,SAAU,OAEd,CACIV,IAAKK,IACLE,QAAS,GACTC,WAAY,MACZC,MAAO,IACPC,SAAU,gBCgBHC,MA9Cf,WACI,IAAMC,EAAU,CACZ,CACIV,MAAO,OACPW,UAAU,EACVC,UAAU,EACVC,SAAU,SAACC,EAAGC,GACV,OAAO,oCAAGA,EAAEjB,OAGpB,CACIE,MAAO,OACPY,UAAU,EACVC,SAAU,SAACC,EAAGC,GACV,OAAO,oCACR,8BAAOA,EAAEf,UAIhB,CACIA,MAAO,cACPa,SAAU,SAACC,EAAGC,GACV,OAAOA,EAAEC,eAKfC,EAAa,CACfC,SAAcC,EACdC,IAAcD,EACdE,aAAcF,EACdG,MAAcH,GAKlB,OACI,yBAAKI,MAAO,CAACC,QAAS,SACpB,kBAAC,IAAD,CAAUC,OAAQR,EACRP,QAASA,EACTgB,QANA,GAOAH,MANI,CAAEI,SAAU,YC3BrBC,MARf,WACI,OACI,6BACE,kBAAC,EAAD,QCGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.defbac2c.chunk.js","sourcesContent":["export const PROJECTS = [\r\n    {\r\n        _id: 1,\r\n        _class: 'PROJECT',\r\n        label: 'a',\r\n    }\r\n];\r\nexport const WBS = [\r\n    {\r\n        _id: 10,\r\n        _class: 'WBS',\r\n        label: 'b',\r\n    }\r\n];\r\nexport const WORKPACKAGES = [\r\n    {\r\n        _id: 100,\r\n        _class: 'WORKPACKAGE',\r\n        label: 'c',\r\n    }\r\n];\r\n\r\nlet i = 10000000;\r\nexport const EDGES = [\r\n    {\r\n        _id: i++,\r\n        from_id: 1,\r\n        from_class: 'PROJECT',\r\n        to_id: 10,\r\n        to_class: 'WBS',\r\n    },\r\n    {\r\n        _id: i++,\r\n        from_id: 10,\r\n        from_class: 'WBS',\r\n        to_id: 100,\r\n        to_class: 'WORKPACKAGE',\r\n    },\r\n];\r\n","import React from 'react';\r\n\r\nimport WBSTable from '@yanqirenshi/table.wbs';\r\n\r\nimport * as WBS_DATA from './data.js';\r\n\r\nfunction PageExample() {\r\n    const columns = [\r\n        {\r\n            label: 'Code',\r\n            leveling: true,\r\n            required: true,\r\n            contents: (c, d) => {\r\n                return <>{d._id}</>;\r\n            }\r\n        },\r\n        {\r\n            label: 'Name',\r\n            required: true,\r\n            contents: (c, d) => {\r\n                return <>\r\n               <span>{d.label}</span>\r\n             </>;\r\n            },\r\n        },\r\n        {\r\n            label: 'Description',\r\n            contents: (c, d) => {\r\n                return d.description;\r\n            }\r\n        },\r\n    ];\r\n\r\n    const wbs_source = {\r\n        projects:     WBS_DATA.PROJECTS,\r\n        wbs:          WBS_DATA.WBS,\r\n        workpackages: WBS_DATA.WORKPACKAGES,\r\n        edges:        WBS_DATA.EDGES,\r\n    };\r\n\r\n    const options = {}; // or null\r\n    const style_table = { fontSize: '16px' }; // or null\r\n    return (\r\n        <div style={{padding: '33px'}}>\r\n          <WBSTable source={wbs_source}\r\n                    columns={columns}\r\n                    options={options}\r\n                    style={style_table}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageExample;\r\n","import React from 'react';\r\n\r\nimport 'bulma/css/bulma.min.css';\r\n\r\nimport PageExample from './PageExample';\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n          <PageExample />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}